#!/usr/bin/env node

const app = require('../app');
const http = require('http');
//chatroom env
const socketIo = require('socket.io');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

const { sql, poolPromise } = require("../config/db");
//chatroom
const io = socketIo(server);

io.on('connection', (socket) => {
  console.log('user conneted');
//login
    socket.on('authenticate', async (userId, callback) => {
        try{
            const pool = await poolPromise;
            const result = await pool.request().input('UserID', sql.Int, userId).query('SELECT * FROM Users WHERE UserID = @UserID');

        if (result.recordset.length === 0) {
            return callback({ error: 'User Not Found (ã„’oã„’)' });
        }
        const user = result.recordset[0];
        socket.data.user = {
            UserID: user.UserID, Username: user.Username
        };
        callback({success: true});
        } catch (err) {
            console.error('Login error', err);
            callback({error: 'Authentication err'});
        }
    });
//enter room
    socket.on('join room', async (roomname, callback) => {
        try {
            const pool = await poolPromise;
            const user = socket.data.user;
            if (!user) return;
//leave room
      if (socket.data.room) {
        socket.leave(`room_${socket.data.room.RoomID}`);
      }
//search/create room
      let result = await pool.request()
        .input('ChatName', sql.NVarChar, roomname)
        .query('SELECT * FROM Communities WHERE ChatName = @ChatName');
      let room = result.recordset[0];
//create new room
            if (!room) {
                result = await pool.request()
                    .input('ChatName', sql.NVarChar, roomname)
                    .input('CreatorID', sql.Int, user.UserID)
                    .query('INSERT INTO Communities (ChatName, CreatorID) OUTPUT INSERTED.RoomID VALUES (@ChatName, @CreatorID)');
                room = { RoomID: result.recordset[0].RoomID, ChatName: roomname, CreatorID: user.UserID };
            }
//add lid
            await pool.request()
                .input('RoomID', sql.Int, room.RoomID)
                .input('UserID', sql.Int, user.UserID)
                .query(`IF NOT EXISTS (
                    SELECT * FROM Favorites WHERE RoomID = @RoomID AND UserID = @UserID) INSERT INTO Favorites (RoomID, UserID) VALUES (@RoomID, @UserID)`);
//join room                    
            socket.join(`room_${room.RoomID}`);
            socket.data.room = room;
//history msg
            const msgResult = await pool.request()
                    .input('RoomID', sql.Int, room.RoomID)
                    .query(`SELECT Messages.Content, Messages.Time, Users.Username FROM Messages JOIN Users ON Messages.FromUser = Users.UserID WHERE RoomID = @RoomID ORDER BY Messages.MessageID ASC`);
            const messages = msgResult.recordset.map(msg => ({
                username: msg.Username, message: msg.Content, time: msg.Time
            }));
            callback({ room: { RoomID: room.RoomID, ChatName: room.ChatName }, messages: messages });
        } catch (err) {
            console.error('Join room error', err);
        }
    });
//accept and save new msg
    socket.on('chat message', async (msg) => {
        try {
            const pool = await poolPromise;
            const user = socket.data.user;
            const room = socket.data.room;
            if (!user || !room ||!msg) return;
//save msg
            const timestamp = new Date().toISOString();
            await pool.request()
                .input('RoomID', sql.Int, room.RoomID)
                .input('FromUser', sql.Int, user.UserID)
                .input('Content', sql.NVarChar, msg)
                .input('Time', sql.DateTime2, timestamp)
                .query(`INSERT INTO Messages (RoomID, FromUser, Content, Time) VALUES (@RoomID, @FromUser, @Content, @Time)`);
            const message = `[${user.Username}] ${msg}`;
//broad msg
            io.to(`room_${room.RoomID}`).emit('chat message', {
                roomId: room.RoomID, username: user.Username, message: msg, time: timestamp
            });
        } catch (err) {
            console.error('Message error:', err);
        }
    });

    socket.on('disconnect', () => {
        console.log('user disconnected');
        if (socket.data.room) {
            socket.leave(`room_${socket.data.room.RoomID}`);
        }
    });
});

server.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}