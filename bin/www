#!/usr/bin/env node

const app = require('../app');
const http = require('http');
//chatroom env
const socketIo = require('socket.io');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

const { sql, poolPromise } = require("../config/db");
//chatroom
const io = socketIo(server);

// bin/www 或者你实际注册 io.on("connection") 的文件
// … 上面省略 require 和 server listen …

io.on("connection", (socket) => {
  console.log("user connected");

  // ------- Authenticate event （假设你已经有这一段了） -------
  socket.on("authenticate", async (userId, callback) => {
    try {
      const pool = await poolPromise;
      const result = await pool.request()
        .input("UserID", sql.Int, userId)
        .query("SELECT * FROM Users WHERE UserID = @UserID");
      if (result.recordset.length === 0) {
        return callback({ error: "User Not Found" });
      }
      const user = result.recordset[0];
      socket.data.user = { UserID: user.UserID, Username: user.Username };
      callback({ success: true });
    } catch (err) {
      console.error("Login error", err);
      callback({ error: "Authentication err" });
    }
  });

  // ------- Join room 事件：只传 RoomID（整数） -------
  socket.on("join room", async (roomId, callback) => {
    try {
      // 1. 把 roomId 强制转成整数
      const RoomID = parseInt(roomId, 10);
      if (isNaN(RoomID)) {
        return callback({ error: "Invalid RoomID (not a number)" });
      }

      // 2. 必须先 authenticate
      const user = socket.data.user;
      if (!user) {
        return callback({ error: "Not authenticated" });
      }

      const pool = await poolPromise;
      // 3. 查这个 RoomID 在 Communities 里是否存在
      const roomResult = await pool.request()
        .input("RoomID", sql.Int, RoomID)
        .query("SELECT * FROM Communities WHERE RoomID = @RoomID");
      const room = roomResult.recordset[0];
      if (!room) {
        return callback({ error: "Room not found" });
      }

      // 4. 如果之前 join 过某个房间，要先 leave
      if (socket.data.room) {
        socket.leave(`room_${socket.data.room.RoomID}`);
      }

      // 5. 把这个 Socket 加入新的频道
      socket.join(`room_${RoomID}`);
      socket.data.room = room;

      // 6. 拉这房间的成员列表
      const membersResult = await pool.request()
        .input("RoomID", sql.Int, RoomID)
        .query(`
          SELECT u.UserID, u.Username, u.Image
          FROM Favorites f
          JOIN Users u ON f.UserID = u.UserID
          WHERE f.RoomID = @RoomID
        `);

      // 7. 拉这房间的历史消息
      const messagesResult = await pool.request()
        .input("RoomID", sql.Int, RoomID)
        .query(`
          SELECT m.MessageID, m.FromUser, u.Username, m.Content, m.Time, m.RoomID
          FROM Messages m
          JOIN Users u ON m.FromUser = u.UserID
          WHERE m.RoomID = @RoomID
          ORDER BY m.MessageID ASC
        `);
      const messages = messagesResult.recordset.map(r => ({
        MessageID: r.MessageID,
        FromUser: r.FromUser,
        Username: r.Username,
        Content: r.Content,
        Time: r.Time,
        RoomID: r.RoomID
      }));

      // 8. 一并把 room 基本信息、成员、历史消息都回给前端
      callback({
        room: {
          RoomID: room.RoomID,
          ChatName: room.ChatName,
          Image: room.Image
        },
        members: membersResult.recordset,
        messages: messages
      });
    } catch (err) {
      console.error("Join room error", err);
      callback({ error: "Server error during join room" });
    }
  });

  // ------- 接收并广播新消息 -------
  socket.on("chat message", async (data) => {
    try {
      // data = { roomId: <number>, message: <string> }
      const { roomId, message } = data;
      const user = socket.data.user;
      const room = socket.data.room;
      // roomId 也应该用 parseInt 检查一次
      const RoomID = parseInt(roomId, 10);
      if (!user || !room || isNaN(RoomID) || !message) return;

      const pool = await poolPromise;
      const timestamp = new Date().toISOString();
      await pool.request()
        .input("RoomID", sql.Int, RoomID)
        .input("FromUser", sql.Int, user.UserID)
        .input("Content", sql.NVarChar, message)
        .input("Time", sql.DateTime2, timestamp)
        .query(`
          INSERT INTO Messages (RoomID, FromUser, Content, Time)
          VALUES (@RoomID, @FromUser, @Content, @Time)
        `);

      // 最终广播给该房间所有在线用户
      io.to(`room_${RoomID}`).emit("chat message", {
        roomId: RoomID,
        username: user.Username,
        message: message,
        time: timestamp
      });
    } catch (err) {
      console.error("Message error:", err);
    }
  });

  // ------- 断开时退房 -------
  socket.on("disconnect", () => {
    console.log("user disconnected");
    if (socket.data.room) {
      socket.leave(`room_${socket.data.room.RoomID}`);
    }
  });
});

//hier aanpassen naar je eigen ipv4 !!!
server.listen(port, () => {
  //innerconnect met server-pc：http://<ip4adress>:${port}
  //dan ga je naar http://<ip4adress>:3000
  console.log(`Server running on http://localhost:${port}`);
});

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}